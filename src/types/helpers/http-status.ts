export interface HTTPStatus {
    code: number,
    message: string,
    description: string,
}

export type HTTPStatusMap = {
    continueProcessing: HTTPStatus;
    switchingProtocols: HTTPStatus;
    processing: HTTPStatus;
    ok: HTTPStatus;
    created: HTTPStatus;
    accepted: HTTPStatus;
    nonAuthoritativeInformation: HTTPStatus;
    noContent: HTTPStatus;
    resetContent: HTTPStatus;
    partialContent: HTTPStatus;
    multiStatus: HTTPStatus;
    imUsed: HTTPStatus;
    multipleChoices: HTTPStatus;
    movedPermanently: HTTPStatus;
    found: HTTPStatus;
    seeOther: HTTPStatus;
    notModified: HTTPStatus;
    useProxy: HTTPStatus;
    temporaryRedirect: HTTPStatus;
    permanentRedirect: HTTPStatus;
    badRequest: HTTPStatus;
    unauthorized: HTTPStatus;
    paymentRequired: HTTPStatus;
    forbidden: HTTPStatus;
    notFound: HTTPStatus;
    methodNotAllowed: HTTPStatus;
    notAcceptable: HTTPStatus;
    proxyAuthenticationRequired: HTTPStatus;
    requestTimeout: HTTPStatus;
    conflict: HTTPStatus;
    gone: HTTPStatus;
    lengthRequired: HTTPStatus;
    preconditionFailed: HTTPStatus;
    payloadTooLarge: HTTPStatus;
    uriTooLong: HTTPStatus;
    unsupportedMediaType: HTTPStatus;
    rangeNotSatisfiable: HTTPStatus;
    expectationFailed: HTTPStatus;
    imATeapot: HTTPStatus;
    unprocessableEntity: HTTPStatus;
    locked: HTTPStatus;
    failedDependency: HTTPStatus;
    upgradeRequired: HTTPStatus;
    preconditionRequired: HTTPStatus;
    tooManyRequests: HTTPStatus;
    requestHeaderFieldsTooLarge: HTTPStatus;
    unavailableForLegalReasons: HTTPStatus;
    internalServerError: HTTPStatus;
    notImplemented: HTTPStatus;
    badGateway: HTTPStatus;
    serviceUnavailable: HTTPStatus;
    gatewayTimeOut: HTTPStatus;
    httpVersionNotSupported: HTTPStatus;
    variantAlsoNegotiates: HTTPStatus;
    insufficientStorage: HTTPStatus;
    networkAuthenticationRequired: HTTPStatus;
    '100': HTTPStatus;
    '101': HTTPStatus;
    '102': HTTPStatus;
    '200': HTTPStatus;
    '201': HTTPStatus;
    '202': HTTPStatus;
    '203': HTTPStatus;
    '204': HTTPStatus;
    '205': HTTPStatus;
    '206': HTTPStatus;
    '207': HTTPStatus;
    '226': HTTPStatus;
    '300': HTTPStatus;
    '301': HTTPStatus;
    '302': HTTPStatus;
    '303': HTTPStatus;
    '304': HTTPStatus;
    '305': HTTPStatus;
    '307': HTTPStatus;
    '308': HTTPStatus;
    '400': HTTPStatus;
    '401': HTTPStatus;
    '402': HTTPStatus;
    '403': HTTPStatus;
    '404': HTTPStatus;
    '405': HTTPStatus;
    '406': HTTPStatus;
    '407': HTTPStatus;
    '408': HTTPStatus;
    '409': HTTPStatus;
    '410': HTTPStatus;
    '411': HTTPStatus;
    '412': HTTPStatus;
    '413': HTTPStatus;
    '414': HTTPStatus;
    '415': HTTPStatus;
    '416': HTTPStatus;
    '417': HTTPStatus;
    '418': HTTPStatus;
    '422': HTTPStatus;
    '423': HTTPStatus;
    '424': HTTPStatus;
    '426': HTTPStatus;
    '428': HTTPStatus;
    '429': HTTPStatus;
    '431': HTTPStatus;
    '451': HTTPStatus;
    '500': HTTPStatus;
    '501': HTTPStatus;
    '502': HTTPStatus;
    '503': HTTPStatus;
    '504': HTTPStatus;
    '505': HTTPStatus;
    '506': HTTPStatus;
    '507': HTTPStatus;
    '511': HTTPStatus;
}