export interface HTTPStatusXXX {
    code: number,
    message: string,
    description: string,
}

export type RESTFullObj = {
    continueProcessing: HTTPStatusXXX;
    switchingProtocols: HTTPStatusXXX;
    processing: HTTPStatusXXX;
    ok: HTTPStatusXXX;
    created: HTTPStatusXXX;
    accepted: HTTPStatusXXX;
    nonAuthoritativeInformation: HTTPStatusXXX;
    noContent: HTTPStatusXXX;
    resetContent: HTTPStatusXXX;
    partialContent: HTTPStatusXXX;
    multiStatus: HTTPStatusXXX;
    imUsed: HTTPStatusXXX;
    multipleChoices: HTTPStatusXXX;
    movedPermanently: HTTPStatusXXX;
    found: HTTPStatusXXX;
    seeOther: HTTPStatusXXX;
    notModified: HTTPStatusXXX;
    useProxy: HTTPStatusXXX;
    temporaryRedirect: HTTPStatusXXX;
    permanentRedirect: HTTPStatusXXX;
    badRequest: HTTPStatusXXX;
    unauthorized: HTTPStatusXXX;
    paymentRequired: HTTPStatusXXX;
    forbidden: HTTPStatusXXX;
    notFound: HTTPStatusXXX;
    methodNotAllowed: HTTPStatusXXX;
    notAcceptable: HTTPStatusXXX;
    proxyAuthenticationRequired: HTTPStatusXXX;
    requestTimeout: HTTPStatusXXX;
    conflict: HTTPStatusXXX;
    gone: HTTPStatusXXX;
    lengthRequired: HTTPStatusXXX;
    preconditionFailed: HTTPStatusXXX;
    payloadTooLarge: HTTPStatusXXX;
    uriTooLong: HTTPStatusXXX;
    unsupportedMediaType: HTTPStatusXXX;
    rangeNotSatisfiable: HTTPStatusXXX;
    expectationFailed: HTTPStatusXXX;
    imATeapot: HTTPStatusXXX;
    unprocessableEntity: HTTPStatusXXX;
    locked: HTTPStatusXXX;
    failedDependency: HTTPStatusXXX;
    upgradeRequired: HTTPStatusXXX;
    preconditionRequired: HTTPStatusXXX;
    tooManyRequests: HTTPStatusXXX;
    requestHeaderFieldsTooLarge: HTTPStatusXXX;
    unavailableForLegalReasons: HTTPStatusXXX;
    internalServerError: HTTPStatusXXX;
    notImplemented: HTTPStatusXXX;
    badGateway: HTTPStatusXXX;
    serviceUnavailable: HTTPStatusXXX;
    gatewayTimeOut: HTTPStatusXXX;
    httpVersionNotSupported: HTTPStatusXXX;
    variantAlsoNegotiates: HTTPStatusXXX;
    insufficientStorage: HTTPStatusXXX;
    networkAuthenticationRequired: HTTPStatusXXX;
    '100': HTTPStatusXXX;
    '101': HTTPStatusXXX;
    '102': HTTPStatusXXX;
    '200': HTTPStatusXXX;
    '201': HTTPStatusXXX;
    '202': HTTPStatusXXX;
    '203': HTTPStatusXXX;
    '204': HTTPStatusXXX;
    '205': HTTPStatusXXX;
    '206': HTTPStatusXXX;
    '207': HTTPStatusXXX;
    '226': HTTPStatusXXX;
    '300': HTTPStatusXXX;
    '301': HTTPStatusXXX;
    '302': HTTPStatusXXX;
    '303': HTTPStatusXXX;
    '304': HTTPStatusXXX;
    '305': HTTPStatusXXX;
    '307': HTTPStatusXXX;
    '308': HTTPStatusXXX;
    '400': HTTPStatusXXX;
    '401': HTTPStatusXXX;
    '402': HTTPStatusXXX;
    '403': HTTPStatusXXX;
    '404': HTTPStatusXXX;
    '405': HTTPStatusXXX;
    '406': HTTPStatusXXX;
    '407': HTTPStatusXXX;
    '408': HTTPStatusXXX;
    '409': HTTPStatusXXX;
    '410': HTTPStatusXXX;
    '411': HTTPStatusXXX;
    '412': HTTPStatusXXX;
    '413': HTTPStatusXXX;
    '414': HTTPStatusXXX;
    '415': HTTPStatusXXX;
    '416': HTTPStatusXXX;
    '417': HTTPStatusXXX;
    '418': HTTPStatusXXX;
    '422': HTTPStatusXXX;
    '423': HTTPStatusXXX;
    '424': HTTPStatusXXX;
    '426': HTTPStatusXXX;
    '428': HTTPStatusXXX;
    '429': HTTPStatusXXX;
    '431': HTTPStatusXXX;
    '451': HTTPStatusXXX;
    '500': HTTPStatusXXX;
    '501': HTTPStatusXXX;
    '502': HTTPStatusXXX;
    '503': HTTPStatusXXX;
    '504': HTTPStatusXXX;
    '505': HTTPStatusXXX;
    '506': HTTPStatusXXX;
    '507': HTTPStatusXXX;
    '511': HTTPStatusXXX;
}